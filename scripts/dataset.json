{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nfrom ngraph . factory . comm_nodes import GpuQueueSendOp , GpuQueueRecvOp\n##Fixed Code:", "completion": "from ngraph . op_graph . comm_nodes import GPUQueueSendOp , GPUQueueRecvOp"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nself . recv_nodes [ recv_id ] = op\n##Fixed Code:", "completion": "self . recv_nodes . append ( op )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\nraise ValueError ( ( 'labels 1must have 1 dimension, ' 'found {}' ) . format ( len ( labels . shape ) ) )\n##Fixed Code:", "completion": "raise ValueError ( ( 'labels must have 1 dimension, ' 'found {}' ) . format ( len ( labels . shape ) ) )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nassert ng . testing . allclose ( tf_result , ng_result , rtol = rtol , atol = atol )\n##Fixed Code:", "completion": "ng . testing . assert_allclose ( tf_result , ng_result , rtol = rtol , atol = atol , err_msg = 'Tensorflow.Importer.Tester.run' , verbose = True )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nif position : self . graph_passes . insert ( position , graph_pass ) else : self . graph_passes . append ( graph_pass )\n##Fixed Code:", "completion": "if position is not None : self . graph_passes . insert ( position , graph_pass ) else : self . graph_passes . append ( graph_pass )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\n'direct'\n##Fixed Code:", "completion": "'broadcast'"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\nself . graph_passes = [ DeviceAssignPass ( hetr = self , default_device = 'gpu' , default_device_id = 0 ) , CommunicationPass ( self . send_nodes ) , DistributedPass ( self . send_nodes ) ]\n##Fixed Code:", "completion": "self . graph_passes = [ DeviceAssignPass ( hetr = self , default_device = 'cpu' , default_device_id = 0 ) , CommunicationPass ( self . send_nodes ) , DistributedPass ( self . send_nodes ) ]"}
{"prompt": "##Task: Fix the issues\n##Bug Type: WRONG_FUNCTION_NAME\n##Buggy Code:\nw_axes = in_obj . axes . sample_axes ( )\n##Fixed Code:", "completion": "w_axes = in_obj . axes . feature_axes ( )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\nconfig . flex_and_argon_disabled = pytest . mark . xfail ( config . getvalue ( \"transformer\" ) == \"flex\" or config . getvalue ( \"transformer\" ) == \"argon\" , reason = \"Not supported by argon or flex backend\" , strict = True )\n##Fixed Code:", "completion": "config . flex_and_argon_disabled = pytest . mark . xfail ( config . getvalue ( \"transformer\" ) == \"flexgpu\" or config . getvalue ( \"transformer\" ) == \"argon\" , reason = \"Not supported by argon or flex backend\" , strict = True )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nidentity_conn = self . side_path ( in_obj )\n##Fixed Code:", "completion": "identity_conn = self . side_path ( in_obj ) if self . side_path else in_obj"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\nconfig . flex_and_argon_disabled = pytest . mark . xfail ( config . getvalue ( \"transformer\" ) == \"flex\" or config . getvalue ( \"transformer\" ) == \"argon\" , reason = \"Not supported by argon or flex backend\" , strict = True )\n##Fixed Code:", "completion": "config . flex_and_argon_disabled = pytest . mark . xfail ( config . getvalue ( \"transformer\" ) == \"flexgpu\" or config . getvalue ( \"transformer\" ) == \"argon\" , reason = \"Not supported by argon or flex backend\" , strict = True )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nidentity_conn = self . side_path ( in_obj )\n##Fixed Code:", "completion": "identity_conn = self . side_path ( in_obj ) if self . side_path else in_obj"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\nprint ( '\\nDownloading and unzipped traveling salesman data {} released ' 'with Pointer Networks paper\\n' . format ( file_name ) )\n##Fixed Code:", "completion": "print ( '\\nDownloading and unzipping traveling salesman data {} released ' 'with Pointer Networks paper\\n' . format ( file_name ) )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_BOOLEAN_LITERAL\n##Buggy Code:\nuse_mlsl = True\n##Fixed Code:", "completion": "use_mlsl = False"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\n'darwin' : [ os . getenv ( 'MBLIB_BASE' ) or '/usr/local' , '/usr' , '/sw' ] ,\n##Fixed Code:", "completion": "'darwin' : [ os . getenv ( 'MPLIB_BASE' ) or '/usr/local' , '/usr' , '/sw' ] ,"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nremove = ( r'\\rm' , '\\cal' , '\\tt' , '\\it' , '\\\\' , '{' , '}' )\n##Fixed Code:", "completion": "remove = ( r'\\mathdefault' , r'\\rm' , r'\\cal' , r'\\tt' , r'\\it' , '\\\\' , '{' , '}' )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\n'darwin' : [ '/sw/lib/freetype2' , '/sw/lib/freetype219' , '/usr/local' , '/usr' , '/sw' ] ,\n##Fixed Code:", "completion": "'darwin' : [ '/sw/lib/freetype2' , '/sw/lib/freetype219' , '/usr/local' , '/usr' , '/sw' , '/usr/X11R6' ] ,"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_BINARY_OPERAND\n##Buggy Code:\nstep = range / 2 ** bits\n##Fixed Code:", "completion": "step = range / ( 2 ** bits - 1 )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SAME_FUNCTION_WRONG_CALLER\n##Buggy Code:\ntorch . save ( model . state_dict ( ) , 'model.pt' )\n##Fixed Code:", "completion": "torch . save ( rnn . state_dict ( ) , 'model.pt' )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nvocab_size = len ( vocab )\n##Fixed Code:", "completion": "vocab_size = len ( fasta_sampler . vocabulary )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_NUMERIC_LITERAL\n##Buggy Code:\nindex = np . random . randint ( max ( 0 , len ( sample ) - slice_len + 1 ) )\n##Fixed Code:", "completion": "index = np . random . randint ( max ( 1 , len ( sample ) - slice_len + 1 ) )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_BINARY_OPERAND\n##Buggy Code:\nself . lstm_in_size = len ( self . convs ) * num_filters + 1\n##Fixed Code:", "completion": "self . lstm_in_size = len ( self . convs ) * num_filters + self . input_size"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\n\"objectives\" : ( \"panel-primary\" , \"glyphicon-certificate\" ) ,\n##Fixed Code:", "completion": "\"objectives\" : ( \"panel-warning\" , \"glyphicon-certificate\" ) ,"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_IDENTIFIER_USED\n##Buggy Code:\nusing in a set of HTML documents . Usage : catalog . py file [ file . . . ]\n##Fixed Code:", "completion": "used in a set of HTML documents . Usage : catalog . py file [ file . . . ]"}
{"prompt": "##Task: Fix the issues\n##Bug Type: ADD_FUNCTION_AROUND_EXPRESSION\n##Buggy Code:\nfor m in self . messages : print ( m , file = stream )\n##Fixed Code:", "completion": "for m in sorted ( self . messages ) : print ( m , file = stream )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\nreporter . check_field ( config_file , 'configuration' , config , 'contact' )\n##Fixed Code:", "completion": "reporter . check_field ( config_file , 'configuration' , config , 'email' )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\nUSAGE = 'Usage: \"check-workshop path/to/root/directory\"'\n##Fixed Code:", "completion": "USAGE = 'Usage: \"workshop_check.py path/to/root/directory\"'"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nif npy . isnan ( obj ) or obj in ( - npy . infinity , npy . infinity ) : raise ValueError , \"Can only output finite numbers in PDF\"\n##Fixed Code:", "completion": "if npy . isnan ( obj ) or obj in ( - npy . inf , npy . inf ) : raise ValueError , \"Can only output finite numbers in PDF\""}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nXs = npy . mlab . max ( Xall , 1 )\n##Fixed Code:", "completion": "Xs = npy . max ( Xall , 1 )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nsvg . append ( '<tspan style=\"font-size: %f; font-family: %s\"' % ( fontsize , fontname ) )\n##Fixed Code:", "completion": "svg . append ( '<tspan style=\"font-size: %f; font-family: %s\"' % ( fontsize , font . family_name ) )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_STRING_LITERAL\n##Buggy Code:\nurl = \"http://nitace.bsd.uchicago.edu:8080/matplotlib\" ,\n##Fixed Code:", "completion": "url = \"http://matplotlib.sourceforge.net\" ,"}
{"prompt": "##Task: Fix the issues\n##Bug Type: ADD_METHOD_CALL\n##Buggy Code:\nres = minimize ( lambda x : - ac ( x , gp = gp , ymax = ymax ) , x_try , bounds = bounds , method = 'L-BFGS-B' )\n##Fixed Code:", "completion": "res = minimize ( lambda x : - ac ( x . reshape ( - 1 , 1 ) , gp = gp , ymax = ymax ) , x_try , bounds = bounds , method = 'L-BFGS-B' )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SAME_FUNCTION_SWAP_ARGS\n##Buggy Code:\nres = minimize ( lambda x : - ac ( x . reshape ( - 1 , 1 ) , gp = gp , ymax = ymax ) , x_try , bounds = bounds , method = 'L-BFGS-B' )\n##Fixed Code:", "completion": "res = minimize ( lambda x : - ac ( x . reshape ( 1 , - 1 ) , gp = gp , ymax = ymax ) , x_try , bounds = bounds , method = 'L-BFGS-B' )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: WRONG_FUNCTION_NAME\n##Buggy Code:\nreturn self . _ucb ( x , gp , y_max )\n##Fixed Code:", "completion": "return self . _poi ( x , gp , y_max )"}
{"prompt": "##Task: Fix the issues\n##Bug Type: CHANGE_NUMERIC_LITERAL\n##Buggy Code:\nxi = 0.01 ,\n##Fixed Code:", "completion": "xi = 0.0 ,"}
{"prompt": "##Task: Fix the issues\n##Bug Type: SINGLE_STMT\n##Buggy Code:\nself . plog . print_step ( x , y_init [ - 1 ] )\n##Fixed Code:", "completion": "self . plog . print_step ( x , self . Y [ - 1 ] )"}